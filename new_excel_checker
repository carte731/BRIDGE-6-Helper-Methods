#!/bin/bash

declare -a sub #creates a BASH list, used for saving lists of files held in directory
module load python3_ML/3.6.4 # Loads Python-3 module for use

python_Dataframe(){
    
    # Activates Python and exports BASH variables into the new Python environment
    sub="${sub[@]}" output="${output}" python3 - <<END_OF_PYTHON

import os
import pickle

def fileIso(sub): # Isolates accession numbers from directory file names
    reverse=-1
    inputList={}
    word=""
    for i in sub:
            while(i[reverse] != "_"):
                word+=i[reverse]
                reverse-=1
            word="".join(reversed(word))
            if(word in inputList):
                inputList[word]+=1
            else:
                inputList[word]=1
            # ML[word]=[i + fileType]
            word=""
            reverse=-1
    return(inputList)

def bashImports(): # Imports variables from BASH environment
    sub=list(os.environ['sub'].split(" "))
    output=str(os.environ['output'])
    return(sub, output)

def main(): # Main function
    sub, output = bashImports()
    masterList = fileIso(sub)
    with open(output + "excelTest.pickle", "ab+") as pickle_that:
        pickle.dump(masterList, pickle_that, protocol=pickle.HIGHEST_PROTOCOL)

main()

END_OF_PYTHON

}

compare(){
        excel="${excel}" output="${output}" python3 - << END_OF_COMPARE

import os
import pandas as pd
import pickles

def unPickleThat(output):
    with open(output + "excelTest.pickle") as unPickled:
        dirList = pickle.load(unPickled)
    return(dirList)

def excelIso(found_excel): # Isolates accession numbers from file names
    inputList = pd.read_excel(found_excel)
    excelList = inputList["filename"].tolist()
    for fastq in excelList:
        fastq.strip(".fastq")
    reverse=-1
    inputList={}
    word=""
    for i in found_excel:
            while(i[reverse] != "_"):
                word+=i[reverse]
                reverse-=1
            word="".join(reversed(word))
            if(word in inputList):
                inputList[word]+=1
            else:
                inputList[word]=1
            word=""
            reverse=-1
    return(inputList)

def listCompare(dirList, excelList):
    for fileName in dirList:
        if(dirList[fileName] != excelList[fileName]):
            print("Number mismatch for: " + fileName)
            
def bashImports(): # Imports variables from BASH environment
    excel=str(os.environ['excel'])
    output=str(os.environ['output'])
    return(excel, output)

def main(): # Main function
    excel, output = bashImports()
    dirList = unPickleThat(output)
    excelList = excelIso(excel)
    listCompare(dirList, excelList)

main()

END_OF_COMPARE
}

master_list(){ # Creates listings from directory structures 

    local path=${1}
    output=${2}
    excel=${3}

    cd $path
    declare -a dir_list=$(ls -d */)
    counter=1
    for subdirs in ${dir_list[@]}; do
        declare -a sub=()
        localDir="$path""$subdirs"
        local dirFiles=$(find "$path""$subdirs" -type f -name "*${fileType}*")
        for i in ${dirFiles[@]}; do
            local filename=${i##*/}
            filename=${filename%.*}
            sub+=("$filename")
        done
        python_Dataframe
        echo -e "ROUND $subdirs complete...\n"
    done
    compare
    echo -e "OPERATIONS COMPLETE...\n"
}

main(){ # Main function for BASH
  
    master_list "$@"

}

main "$@" # runs main function and imports parameters arguments.