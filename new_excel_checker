#!/usr/bin/env python3

import os
import sys
import pandas as pd

## I don't check the accession number (name) match with the filename. I did this with other test I developed <name_script_here> 

def fileIso(sub): # Isolates accession numbers from directory file names
    reverse=-1
    inputList={}
    ML={}
    word=""
    for i in sub:
        while(i[reverse] != "_"):
            word+=i[reverse]
            reverse-=1
        word="".join(reversed(word))
        if(word in inputList): # If the accession number is there, add to the accession counter number
            inputList[word]+=1
            ML[word].append(i + ".fastq") ## Another dictionary that tracks the full file name      
        else: # If the accession number is not there, add it to dictionary and count it
            inputList[word]=1
            ML[word]=[i + ".fastq"]
        word=""
        reverse=-1
    return(inputList, ML)

def excelIso(found_excel): # Pulls files names from excel file
    inputList = pd.read_excel(found_excel)
    excelList = inputList["filename"].tolist()
    nameList = inputList["library_ID"].tolist()
    newList = []
    newnameList = []
    [ newList.append(i.strip('.fastq')) for i in excelList ]
    for t in nameList:
        if(t[-2] == "-"):
            newnameList.append(t[:-2])
        else:
            newnameList.append(t)
    reverse=-1
    inputList={}
    EL={}
    word=""
    for i in newList:
        while(i[reverse] != "_"):
            word+=i[reverse]
            reverse-=1
        word="".join(reversed(word))
        if(word not in newnameList): # Check if file name matches library-ID
            print("\nFile mis-match for: " + word + " : " + i + "\n")
        if(word in inputList):
            inputList[word]+=1
            EL[word].append(i + ".fastq")
        else:
            inputList[word]=1
            EL[word]=[i + ".fastq"]
        word=""
        reverse=-1
    return(inputList, newnameList, EL)

def listCompare(masterList, newnameList, excel, ML, EL, path): # Compares dictory values to see if the entries are the same
    counter = 0
    for fileName in masterList:
        if(fileName in excel):
            if(fileName not in newnameList): # Check if file name matches library-ID
                print("\nFile mis-match for: " + fileName + " - " + str(ML[fileName]) + " : " + str(EL[fileName]) + "\n")
            if(masterList[fileName] != excel[fileName]): # Checks if the number of entries are the same
                counter += 1
                print("\nNumber mismatch in found list: " + fileName)
                print("Directory listing: " + str(ML[fileName]))
                print("Excel listing: " + str(EL[fileName]) + "\n\n")
        else:
            counter += 1
            print(path + str(ML[fileName]) + " NOT FOUND\n")
    if(counter == 0):
        print("\nNo ERRORS found...\n")


def master_list(path): # Creates listings from directory structures 
    fastqFiles = [ os.path.splitext(f)[0] for f in os.listdir(path) if os.path.isfile(path + f) ]
    return(fastqFiles)

    
def argImports(): # Imports arguments from command line
    path= sys.argv[1]
    excel = sys.argv[2]
    return(path, excel)

def main(): # Main function
    path, excel = argImports()
    sub = master_list(path)
    masterList, ML = fileIso(sub)
    excelList, newnameList, EL = excelIso(excel)
    listCompare(masterList, newnameList, excelList, ML, EL, path)

    print("\nOPERATIONS COMPLETE...\n")


main() # runs main function and imports parameters arguments.